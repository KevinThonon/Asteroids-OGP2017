package asteroids.model;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import asteroids.model.Expressions.*;
import asteroids.model.statements.Statement;


public class Program {
	
	private List<Function> functions;
	private Statement main;
	private Map<String,Expression> variables = new HashMap<String,Expression>();
	private double timeLeftToExecute = 0;
	
	
	public Program(List<Function> functions, Statement main){
		setListFunctions(functions);
		setMainStatement(main);
		for (Function function: functions) 
			function.setProgram(this);
		main.setProgram(this);
	}
	
	public List<Function> getListFuntions(){
		return this.functions;
	}
	
	public void setListFunctions(List<Function> functions){
		this.functions = functions;
	}
	
	public Statement getMainStatement(){
		return this.main;
	}
	
	public void setMainStatement(Statement main){
		this.main = main;
	}
	
	
	
	public double getTimeLeftToExecute(){
		return this.timeLeftToExecute;
	}
	
	public void setTimeLeftToExecute(double timeLeftToExecute){
		this.timeLeftToExecute = timeLeftToExecute;
	}
	
	public Map<String,Expression> getMapsOfVariables(){
		return this.variables;
	}
	
	public void addVariable(String variableName,Expression variable){
		this.variables.put(variableName, variable);
	}
	
	private List<Object> objectsPrinted = new ArrayList<Object>();
	
	public List<Object> getObjectsPrinted(){
		return this.objectsPrinted;
	}
	
	public void AddObjectsPrinted(Object object){
		this.objectsPrinted.add(object);
	}
	
	private boolean breakEnabled = false;
	public boolean isBreakEnabled() {
		return breakEnabled;
	}

	public void setBreakEnabled(boolean breakEnabled) {
		this.breakEnabled = breakEnabled;
	}
	
 	private boolean assertOn;
 	public boolean assertOn() {
 		return assertOn;
 	}
 	
 	public void assertEnabled(boolean assertEnable) {
 		this.assertOn = assertEnable;
 	}
	
	public List<Object> execute(Ship ship, double dt){
		this.setShip(ship);
		this.getShip().setProgram(this);
		double time= this.getTimeLeftToExecute() + dt;
		this.setTimeLeftToExecute(time);
		while(this.getTimeLeftToExecute() >= 0.2){
			this.getMainStatement().execute();
		}
		return null;
	}
	
	private Ship ship;
	public Ship getShip() {
		return ship;
	}

	public void setShip(Ship ship) {
		this.ship = ship;
	}

	
	
}

