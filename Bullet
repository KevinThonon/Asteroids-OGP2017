package asteroids.model;

import be.kuleuven.cs.som.annotate.Basic;

/**
 * 
 * A class of a bullet with a position, speed, radius and a mass
 * 
 * 
 * @invar a bullet must have a valid radius, radius > 1 | isValidRadius(radius)
 * 
 * @author jefjonkers
 *
 */


public class Bullet extends Entity{
	
	/**
	 *Create a bullet with a given position (x,y), given speed (vx,vy), 
	 *and given radius. 
	 * @param xPosition
	 * 			The x-coordinate of the position of the new bullet.
	 * @param yPosition
	 * 			The y-coordinate of the position of the new bullet.			
	 * @param xSpeed
	 * 			The x-coordinate of the speed of the new bullet.
	 * @param ySpeed
	 * 			The y-coordinate of the speed of the new bullet.
	 * @param radius
	 * 			The radius of the new bullet.
	 * @throws IllegalArgumentException
	 */
	public Bullet(double xPosition, double yPosition, double xSpeed, double ySpeed, double radius)
			throws IllegalArgumentException {
		super(xPosition, yPosition, xSpeed, ySpeed,radius);
		this.setResidualbounces(3);
		this.isTerminated=false;
	}
	
	/**
	 * It returns the minimum radius of the bullet.
	 * @return the radius of the bullet.
	 */
	@Override
	public double getMinRadius(){
		return 1;
	}
	
	
	private final static double density = 7.8E12;
	
	/**
	 * It returns the mass of the bullet.
	 * @see implementation
	 */
	@Basic
	public double getMass() {
		return (4.0/3.0)*Math.PI*Math.pow(getRadius(), 3)*density;
	}
	
	/**
	 * Returns a boolean type. 
	 * @param duration
	 * 			The given duration.
	 * @return It return if the duration is not NaN.
	 * @return It return if the duration is valid.
	 */
	public boolean isValidDuration(double duration){
		if (duration == Double.NaN) return false;
		return duration >= 0;
	}
	
	/**
	 * Sets the new position after a certain duration.
	 * @param duration
	 * 			The given duration.
	 * @throws IllegalArgumentException
	 * 			If the duration isn't valid.
	 * @post if (this.getShip() != null) setPosition( this.getShip().getPosition())
	 * @post else setPosition(new double[]  {this.getPosition()[0] + this.getSpeed()[0]*duration, 
	 * 			this.getPosition()[1] + this.getSpeed()[1]*duration})
	 */
	@Override
	public void move(double duration) throws IllegalArgumentException{
		if (!isValidDuration(duration)) throw new IllegalArgumentException("The given duration isn't valid");
		setPosition(new double[]  
		    {this.getPosition()[0] + this.getSpeed()[0]*duration, this.getPosition()[1] + this.getSpeed()[1]*duration});	
	}
	
	/**
	 * It returns the source (Ship) of the bullet.
	 * @return this.source
	 */
	@Basic
	public Ship getSource() {
		return this.source;
	}
	
	public Ship source;
	
	/**
	 * It sets the source of the Bullet
	 * @param ship
	 * 		The ship of the bullet
	 * @post this.source = ship
	 */
	public void setSource(Ship ship) {
		this.source = ship;
	}
	
	private double residualbounces;
	
	public void setResidualbounces(double bounces){
		this.residualbounces = bounces;
	}
	
	/**
	 * It returns the residual bounces of the bullet.
	 * @return this.residualbounces
	 */
	public double getResidualBounces() {
		return this.residualbounces;
	}
	
	/**
	 * It removes a bounce from residual bounces of the bullet.
	 * @post residualbounces = residualbounces - 1
	 */
	public void substractBounce() {
		residualbounces = residualbounces - 1;
	}
	
	public Ship ship;
	
	/**
	 * It sets the ship of the bullet.
	 * @param ship
	 * 		The ship where the bullet belongs too.
	 * @post this.ship = ship
	 */
	public void setShip(Ship ship) {
		this.ship = ship;
	}
	
	/**
	 * It returns the ship that belongs to the bullet.
	 * @return this.ship;
	 */
	@Basic
	public Ship getShip() {
		return this.ship;
	}
	
	private boolean isTerminated;
	
	/**
	 * Return a boolean telling if a bullet is terminated
	 */
	@Override
	public boolean isTerminated(){
		return this.isTerminated;
	}
	
	/**
	 * Destroy the bullet
	 */
	@Override
	public void terminate(){
		if (this.getShip() != null) this.getShip().removeBullet(this);
		if (this.getWorld() != null) getWorld().removeEntity(this);
		this.isTerminated=true;
	}
	
	/**
	 * Resolve a boundary collision
	 */
	@Override
	public void boundryCollision(){
		this.substractBounce();
		if (this.residualbounces == 0){
			this.terminate();
		}
		else{
			super.boundryCollision();
		}
	}
	
	/**
	 * Resolve a collision between a bullet and an entity
	 */
	@Override
	public void collideWithEntity(Entity entity) {
		if (entity instanceof Ship){
			if (entity == this.getSource()){
				this.getWorld().removeEntity(this);
				((Ship) entity).addBullet(this);
			}
			else{
				this.terminate();entity.terminate();;
			}
		}
    	else {
    		this.terminate();;
    		entity.terminate();;
    	}		
	}
}
	
	
