package asteroids.facade;

public class Ship {
	public Ship(double xPosition, double yPosition, double xSpeed, double ySpeed, 
			double orientation, double radius) throws IllegalArgumentException {
		this.setPosition(new double[] {xPosition,yPosition});
		this.setVelocity(new double[] {xVelocity,yVelocity});
		this.setOrientation(orientation);
		this.setRadius(radius);
	}
	
	private double xPosition;
	private double yPosition;
	private double xSpeed;
	private double ySpeed;
	private double orientation;
	private double radius;
	
	public double[] getPosition(){
		return this.position;
	}
	
	public void setPosition(double xPosition, double yPosition) throws IllegalArgumentException{
		if ((xPosition < Double.NEGATIVE_INFINITY) || (xPosition > Double.POSITIVE_INFINITY) 
				|| (yPosition < Double.NEGATIVE_INFINITY) || (yPosition > Double.POSITIVE_INFINITY)) 
			throw new IllegalArgumentException();
		if (position.length != 2) throw new IllegalArgumentException();
		this.position = [xPosition,yPosition];
	}
	
	private double[] position = new double[2];
	
	public double getXspeed(){
		return this.xSpeed;
	}
	
	public void setXspeed(double xspeed) {
		if (Math.sqrt(Math.pow( xspeed , 2) + Math.pow(getYspeed(), 2) )  < MaxSpeed)
			this.xSpeed = xspeed;
		else
			this.xSpeed = Math.sqrt(Math.pow(MaxSpeed,2) - Math.pow(getYspeed(), 2));		
	}
	
	public double getYspeed(){
		return this.ySpeed;
	}
	
	public void setYspeed(double yspeed) {
		if (Math.sqrt(Math.pow( yspeed , 2) + Math.pow(getXspeed(), 2) ) <= MaxSpeed)
			this.ySpeed = yspeed;
		else
			this.ySpeed = Math.sqrt(Math.pow(MaxSpeed,2) - Math.pow(getXspeed(), 2));
	}
	
	private final static int MaxSpeed = 300000;
	
	public double getOrientation(){
		return this.orientation;
	}
	
	public boolean isValidOrientation(double orientation){
		return ((orientation >=0) && (orientation < 2*Math.PI));
	}
	
	public void setOrientation(double orientation) throws IllegalArgumentException{
		assert(isValidOrientation(orientation));
		this.orientation = orientation;
	}
	
	public void turn(double changeInOrientation){
		assert(isValidOrientation(this.orientation));
		assert(isValidOrientation(changeInOrientation));
		newTemporaryOrientation = (this.orientation + changeInOrientation);
		if (newTemporaryOrientation < 0) 
			this.orientation = newTemporaryOrientation + 2*Math.PI;
		if (newTemporaryOrientation > 2*Math.PI)
			this.orientation = newTemporaryOrientation - 2*Math.PI;
		else
			this.orientation = newTemporaryOrientation;
	}
	
	private double newTemporaryOrientation;
	
	public double getRadius(){
		return this.radius;
	}
	
	public void setRadius(double radius) throws IllegalArgumentException{
		if ((radius < 10000) || (radius > Double.POSITIVE_INFINITY)) 
			throw new IllegalArgumentException();
		this.radius = radius;
	}
	
	public boolean isValidShip(Ship ship) throws IllegalArgumentException{
		if (((ship.xPosition) < Double.NEGATIVE_INFINITY) || ((ship.xPosition) > Double.POSITIVE_INFINITY))
			throw new IllegalArgumentException();
		if (((ship.yPosition) < Double.NEGATIVE_INFINITY) || ((ship.yPosition) > Double.POSITIVE_INFINITY))
			throw new IllegalArgumentException();
		if (((ship.radius) < 10000) || ((ship.radius) > Double.POSITIVE_INFINITY))
			throw new IllegalArgumentException();
		if (((ship.orientation) < 0) || ((ship.orientation) > 2*Math.PI))
			throw new IllegalArgumentException();
		else
			return true;
	}
	
	public double getDistanceBetween(Ship ship1, Ship ship2) throws IllegalArgumentException{
		if (isValidShip(ship1) == false)
			throw new IllegalArgumentException();
		if (isValidShip(ship2) == false)
			throw new IllegalArgumentException();
		return Math.sqrt(Math.pow(ship1.xPosition - ship2.xPosition, 2) + Math.pow(ship1.yPosition - ship2.yPosition, 2)) - ship1.radius - ship2.radius; 
	}
	
	public boolean overlap(Ship ship1, Ship ship2) throws IllegalArgumentException{
		if (isValidShip(ship1) == false)
			throw new IllegalArgumentException();
		if (isValidShip(ship2) == false)
			throw new IllegalArgumentException();
		if (ship1 == ship2)
			return true;
		else 
			if (getDistanceBetween(ship1, ship2) < 0)
				return true;
			else 
				return false;
	}
	
	
