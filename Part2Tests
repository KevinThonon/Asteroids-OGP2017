
package asteroids.tests;

import static org.junit.Assert.*;

import java.util.HashSet;
import java.util.Set;

import org.junit.Before;
import org.junit.Test;

import asteroids.model.Bullet;
import asteroids.model.Ship;
import asteroids.model.World;
import asteroids.facade.Facade;
import asteroids.part2.facade.IFacade;
import asteroids.util.ModelException;

public class Part2Tests {

	private static final double EPSILON = 0.0001;

	IFacade facade;

	@Before
	public void setUp() {
		facade = new Facade();
	}

	@Test
	public void testCreateWorld() throws ModelException {
		World world = facade.createWorld(1000, 800);
		assertEquals(1000, facade.getWorldSize(world)[0], EPSILON);
		assertEquals(800, facade.getWorldSize(world)[1], EPSILON);
		assertTrue(facade.getWorldShips(world).isEmpty());
		assertTrue(facade.getWorldBullets(world).isEmpty());
	}
	
	@Test(expected = java.lang.IllegalArgumentException.class)
	public void testCreateShipNan() throws ModelException{
		facade.createShip(Double.NaN, 464646, -50, -50, 50, Math.PI, 5000000);
	}
	
	@Test
	public void testTurn() throws ModelException{
		Ship ship1 = facade.createShip(50000, 100000, 50000, -50000, 50, 0, 5000000);
		facade.turn(ship1, Math.PI);
		double orientation = facade.getShipOrientation(ship1);
		assertNotNull(orientation);
		assertEquals(Math.PI, orientation, EPSILON);
	}
	
	@Test
	public void testTurn2() throws ModelException {
		Ship ship = facade.createShip(100, 100, 10, 10, 50, Math.PI, 5000000);
		ship.turn(1.6*Math.PI);
		assertEquals(0.6*Math.PI, ship.getOrientation(), EPSILON);
		ship.turn(-1.6*Math.PI);
		assertEquals(Math.PI, ship.getOrientation(), EPSILON);
	}
	
	@Test
	public void testMoveValid() throws ModelException {
		Ship ship = facade.createShip(100, 100, 10, 50, 50, Math.PI, 5000000);
		ship.move(5);
		double xPosition = ship.getPosition()[0];
		double yPosition = ship.getPosition()[1];
		assertEquals(150, xPosition, EPSILON);
		assertEquals(350, yPosition, EPSILON);
	}
	
	@Test(expected = java.lang.IllegalArgumentException.class)
	public void testMoveInvalid() throws ModelException {
		Ship ship = facade.createShip(100, 100, 10, 10, 50, Math.PI, 5000000);
		ship.move(-5);
	}
	
	@Test
	public void testThrust() throws ModelException {
		Ship ship = facade.createShip(0, 0, 0, 0, 50, 0, 1.1E18);
		ship.thrust(2);
		double[] speed = ship.getSpeed();
		assertNotNull(speed);
		assertEquals(2, speed[0], EPSILON);
		assertEquals(0, speed[1], EPSILON);
	}
	
	@Test
	public void testGetDistanceBetween() throws ModelException{
		Ship ship1 = facade.createShip(50000, 100000, 50000, 0, 50, 0, 5000000);
		Ship ship2 = facade.createShip(100000, 100000, 50000, 0, 50, 0, 5000000);
		double distance = facade.getDistanceBetween(ship1, ship2);
		assertEquals(50000, distance, EPSILON);
	}
	
	@Test
	public void testGetDistanceBetween2() throws ModelException {
		Ship ship1 = facade.createShip(100, 100, 10, 10, 50, Math.PI, 5000000);
		Ship ship2 = facade.createShip(500, 300, 10, 10, 50, Math.PI, 5000000);
		assertEquals(Math.sqrt(Math.pow(400, 2)+Math.pow(200, 2)), ship1.getDistanceBetween(ship1, ship2), EPSILON);
	}
	
	@Test
	public void testGetDistanceBetweenSameShips() throws ModelException {
		Ship ship1 = facade.createShip(100, 100, 10, 10, 50, Math.PI, 5000000);
		assertEquals(0,ship1.getDistanceBetween(ship1,ship1),EPSILON);
	}

	@Test
	public void testGetDistanceBetween5() throws ModelException {
		Ship ship1 = facade.createShip(100, 100, 10, 10, 50, Math.PI, 5000000);
		Ship ship2 = facade.createShip(400, 500, 10, 10, 100, Math.PI, 5000000);
		double Distance = ship1.getDistanceBetween(ship1, ship2);
		assertEquals(500,Distance,EPSILON);
	}

	@Test(expected = java.lang.IllegalArgumentException.class)
	public void testGetDistanceBetweenInvalidShip() throws ModelException {
		Ship ship1 = facade.createShip(100, 100, 10, 10, 50, Math.PI, 5000000);
		Ship ship2 = facade.createShip(100, 100, 10, 10, -50, Math.PI, 5000000);
		ship1.getDistanceBetween(ship1, ship2);
	}
	
	@Test
	public void testOverlapIsTrue() throws ModelException{
		Ship ship1 = facade.createShip(100, 0, 0, 0, 80, 0, 5000000);
		Ship ship2 = facade.createShip(0, 0, 0, 0, 80, 0, 5000000);
		boolean overlap = facade.overlap(ship1, ship2);
		assertEquals(true, overlap);
	}
	
	@Test
	public void testOverlapIsFalse() throws ModelException{
		Ship ship1 = facade.createShip(10000, 0, 0, 0, 10, 0, 5000000);
		Ship ship2 = facade.createShip(0, 0, 0, 0, 10, 0, 5000000);
		boolean overlap = facade.overlap(ship1, ship2);
		assertEquals(false, overlap);
	}
	
	@Test
	public void testGetTimeToCollision() throws ModelException{
		Ship ship1 = facade.createShip(0, 0, 0, 0, 10, 0, 5000000);
		Ship ship2 = facade.createShip(100, 0, -10, 0, 10, 0, 5000000);
		double time = facade.getTimeToCollision(ship1, ship2);
		assertNotNull(time);
		assertEquals(8, time, EPSILON);
	}
	
	@Test
	public void testGetTimeToCollision2() throws ModelException {
		Ship ship1 = facade.createShip(1000, 0, -100, 0, 50, 0, 5000000);
		Ship ship2 = facade.createShip(0, 0, 0, 0, 50, 0, 5000000);
		double time = facade.getTimeToCollision(ship1, ship2);
		assertNotNull(time);
		assertEquals(9, time, EPSILON);
	}
	
	@Test
	public void testGetTimeToCollision3() throws ModelException{
		Ship ship1 = facade.createShip(80, 100, 20, 0, 20, 0, 5000000);
		Ship ship2 = facade.createShip(0, 0, -20, 0, 20, 0, 5000000);
		double time = facade.getTimeToCollision(ship1, ship2);
		assertNotNull(time);
		assertEquals(Double.POSITIVE_INFINITY, time, EPSILON);
	}
	
	@Test(expected = java.lang.NullPointerException.class)
	public void testGetTimeToCollision4() throws ModelException {
		Ship ship1 = facade.createShip(100, 100, 10, 10, 50, Math.PI, 5000000);
		Ship ship2 = null;
		ship1.getTimeToCollision(ship1, ship2);
	}
	
	@Test
	public void testGetCollisionPosition() throws ModelException{
		Ship ship1 = facade.createShip(100, 0, 0, 0, 10, 0, 5000000);
		Ship ship2 = facade.createShip(0, 0, 20, 0, 10, 0, 5000000);
		double[] position = facade.getCollisionPosition(ship1, ship2);
		assertEquals(100, position[0], EPSILON);
		assertEquals(0, position[1], EPSILON);
	}
	
	@Test
	public void testGetCollisionPosition2() throws ModelException {
		Ship ship1 = facade.createShip(200, 100, -10, 0, 50, 0, 5000000);
		Ship ship2 = facade.createShip(0, 100, 10, 0, 50, 0, 5000000);
		assertEquals(150, ship1.getCollisionPosition(ship1, ship2)[0], EPSILON);
		assertEquals(100, ship1.getCollisionPosition(ship1, ship2)[1], EPSILON);
	}

	@Test
	//Hoe kan dees eigenlijk zeer raar.
	public void testGetCollisionPosition3() throws ModelException {
		Ship ship1 = facade.createShip(1000, 0, -10, -100, 50, 0, 5000000);
		Ship ship2 = facade.createShip(0, 0, 10, 100, 50, 0, 5000000);
		double [] position = ship1.getCollisionPosition(ship1, ship2);
		double[] solution = {Double.POSITIVE_INFINITY,Double.POSITIVE_INFINITY};
		assertEquals(solution,position);
	}
	
	@Test(expected = java.lang.NullPointerException.class)
	public void testGetCollisionPosition4() throws ModelException {
		Ship ship1 = facade.createShip(100, 100, 10, 10, 50, 0, 5000000);
		Ship ship2 = null;
		ship1.getCollisionPosition(ship1, ship2);
	}
	
	@Test
	public void testGetTimeAndPositionCollision() throws ModelException{
		Ship ship1 = facade.createShip(100, 0, 0, 0, 10, 0, 5000000);
		Ship ship2 = facade.createShip(0, 0, 20, 0, 10, 0, 5000000);
		double[] position = facade.getCollisionPosition(ship1, ship2);
		double time = facade.getTimeToCollision(ship1, ship2);
		assertEquals(100, position[0], EPSILON);
		assertEquals(0, position[1], EPSILON);
		assertEquals(4, time, EPSILON);
	}
	
	@Test
	public void testTimeToBoundaryCollision() throws ModelException{
		Ship ship = facade.createShip(950, 100, 10, 0, 10, 0,500000);
		World world = facade.createWorld(1000, 1000);
		ship.setWorld(world);
		double time = ship.timeToBoundaryCollision();
		assertEquals(4,time, EPSILON);
	}
	
	@Test
	public void testIsTerminated() throws ModelException {
		Ship ship = facade.createShip(100, 100, 10, 10, 50, Math.PI, 5000000);
		World world = facade.createWorld(1000, 1000);
		ship.setWorld(world);
		assert (!(ship.isTerminated()));
		ship.terminate();
		assert (ship.isTerminated());
	}
	
	@Test
	public void testTerminate() throws ModelException {
		Ship ship = facade.createShip(100, 100, 10, 10, 50, Math.PI, 5000000);
		World world = facade.createWorld(1000, 1000);
		ship.setWorld(world);
		ship.terminate();
		assert (ship.isTerminated());
	}
	
	@Test
	public void addingABullet() throws ModelException{
		Ship ship = facade.createShip(100,100,0,0,50,0,5000000);
		Bullet bullet = facade.createBullet(10,10,0,0,10);
		facade.loadBulletOnShip(ship, bullet);
		assertEquals(1,facade.getNbBulletsOnShip(ship));
	}

	@Test
	public void addingMoreBullets() throws ModelException{
		Ship ship = facade.createShip(100,100,0,0,50,0,5000000);
		Bullet bullet1 = facade.createBullet(10,10,0,0,10);
		Bullet bullet2 = facade.createBullet(10,10,0,0,20);
		Bullet bullet3 = facade.createBullet(10,10,0,0,30);
		Set <Bullet> bulletset = new HashSet<Bullet>();
		bulletset.add(bullet1);
		bulletset.add(bullet2);
		bulletset.add(bullet3);
		facade.loadBulletsOnShip(ship,bulletset);
		assertEquals(3,facade.getNbBulletsOnShip(ship));
	}

	@Test
	public void testLoadBulletOnShipOverlappingBullets() throws ModelException {
		Ship ship = facade.createShip(100, 120, 10, 5, 500, 0, 1.0E20);
		Bullet bullet1 = facade.createBullet(100, 120, 10, 5, 50);
		Bullet bullet2 = facade.createBullet(130, 110, 10, 5, 30);
		facade.loadBulletOnShip(ship, bullet1);
		facade.loadBulletOnShip(ship, bullet2);
		assertEquals(2, facade.getNbBulletsOnShip(ship));
	}

	@Test
	public void testEvolve1() throws ModelException {
		World world = facade.createWorld(5000, 5000);
		Ship ship = facade.createShip(100, 120, 10, 0, 50, Math.PI, 1.1E18);
		facade.addShipToWorld(world, ship);
		facade.evolve(world, 1, null);
		assertEquals(110, ship.getPosition()[0], EPSILON);
		assertEquals(120, ship.getPosition()[1], EPSILON);
	}
	
	@Test
	public void testEvolve2() throws ModelException {
		World world = facade.createWorld(5000, 5000);
		Ship ship = facade.createShip(4900, 120, 200, 0, 50, Math.PI, 1.1E18);
		facade.addShipToWorld(world, ship);
		facade.evolve(world, 1, null);
		assertEquals(-200, ship.getSpeed()[0], EPSILON);
		assertEquals(0, ship.getSpeed()[1], EPSILON);
		assertEquals(4900, ship.getPosition()[0] + 2*ship.getRadius(), EPSILON);
		assertEquals(120, ship.getPosition()[1], EPSILON);		
	}
	
	@Test
	public void testEvolveShipWithActiveThruster() throws ModelException {
		World world = facade.createWorld(5000, 5000);
		Ship ship = facade.createShip(100, 120, 10, 0, 50, Math.PI, 1.1E18);
		facade.addShipToWorld(world, ship);
		facade.setThrusterActive(ship, true);
		assertEquals(1000.0, facade.getShipAcceleration(ship), EPSILON);
		assertTrue(facade.isShipThrusterActive(ship));
		facade.evolve(world, 1, null);
		assertEquals(-990, facade.getShipVelocity(ship)[0], EPSILON);
		assertEquals(0, facade.getShipVelocity(ship)[1], EPSILON);
	}

}


