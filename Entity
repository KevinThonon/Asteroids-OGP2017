package asteroids.model;

import be.kuleuven.cs.som.annotate.Basic;
import be.kuleuven.cs.som.annotate.Raw;

public class Entity {
	
	/**
	 * Make an entity (Ship or Bullet) with a certain position and speed
	 * @param xPosition
	 * 		the x-coordinate
	 * @param yPosition
	 * 		the y-coordinate
	 * @param xSpeed
	 * 		the x-coordinate of the speed
	 * @param ySpeed
	 * 		the y-coordinate of the speed
	 * @throws IllegalArgumentException
	 * 		If one of the 4 parameters is invalid, throw an error
	 */
	@Raw
	protected Entity(double xPosition, double yPosition, double xSpeed,
			double ySpeed) throws IllegalArgumentException {
		this.setPosition(new double[] {xPosition,yPosition});
		this.setSpeed(new double[] {xSpeed,ySpeed});
	}
	
	private double xPosition;
	private double yPosition;
	private double xSpeed;
	private double ySpeed;
	private double radius;
	
	/**
	 * Check whether the position is valid
	 * @param position
	 * 		Position to check
	 * @return
	 * 		|if (position.length != 2) 
	 *		|	return false;
	 *		|if (Double.isNaN(position[0])) 
	 *		|	return false;
	 *		|if (Double.isNaN(position[1])) 
	 *		|	return false;
	 *		|else
	 *		|	return true;
	 */
	private boolean isValidPosition(double[] position) {
		if (position.length != 2) 
			return false;
		if (Double.isNaN(position[0])) 
			return false;
		if (Double.isNaN(position[1])) 
			return false;
		else
			return true;
	}
	
	/**
	 * It returns an array of length 2, at index 0 you find the x-coordinate 
	 * and at index 1 you find the y-coordinate.
	 * @return The position of the ship.
	 */
	
	/**
	 * It returns an array of length 2, at index 0 you find the x-coordinate 
	 * and at index 1 you find the y-coordinate.
	 * @return The position of the entity.
	 */
	@Basic
	public double[] getPosition(){
		return this.position;
	}
	
	private double[] position = new double[2];
	
	/**
	 * Set the position of this entity
	 * @param position
	 * 		Position to set
	 * @throws IllegalArgumentException
	 * 		If provided position isn't valid, throw error
	 */
	protected void setPosition(double[] position) throws IllegalArgumentException {
		if (!isValidPosition(position)) throw new IllegalArgumentException("Posistion isn't valid.");
		else
			this.position = position;
	}
	
	/**
	 * It returns an array of length 2, at index 0 you find the speed of the x-coordinate
	 * and at index 1 you find the speed of the y-coordinate.
	 * @return The speed of the ship.
	 */
	public double[] getSpeed(){
		return this.speed;
	}
	
	private double[] speed = new double[2];
	
	/**
	 * Check whether the speed is valid
	 * @param speed
	 * 		Speed to check
	 * @return
	 * 		|if (speed.length != 2) 
	 *		|	return false;
	 *      |if (xSpeed == Double.NaN)
			|   return false;
		    |if (ySpeed == Double.NaN)
		    return false;
	 *      |
	 *		|else
	 *		|	return true;
	 */
	private boolean isValidSpeed(double[] speed) {
		if (speed.length != 2) 
			return false;
		if (speed[0] == Double.NaN)
			return false;
		if (speed[1] == Double.NaN)
		    return false;
		return true;
	}
	private double reducer;
	
	/**
	 * @param speed
	 * 			The speed of the x-coordinate and the speed of the y-coordinate of the entity.
	 * @post If provided speed isn't valid, it turns into zero.
	 * @post If the speed of the x-coordinate is NaN, it turns into zero.
	 * @post If the speed of the y-coordinate is NaN, it turns into zero.
	 * @post If the given speed is equal or smaller then the speed of light, 
	 * the speed of the entity will be the given the provided speed.
	 * @post If the given speed is faster than the speed of light, the new speed will be in the same direction as the
	 * given speed, but the speed will be the speed of light.
	 */
	protected void setSpeed (double[] speed) {
		double MaxSpeed = 300000;
		if (this.isValidSpeed(speed) == false){
			speed[0] = 0;
			speed[1] = 0;
		}
			
		if (Math.sqrt(Math.pow( xSpeed , 2) + Math.pow(ySpeed, 2) ) <= MaxSpeed){
			this.speed = speed;
		}
		else{
			reducer =  MaxSpeed / (Math.pow(xSpeed,2) + Math.pow(ySpeed, 2)) ;
			if (reducer == 0) throw new IllegalArgumentException();
			xSpeed *= reducer;
			ySpeed *= reducer;
			this.speed = new double[] {xSpeed,ySpeed};	
		}
	}
	
	
	
	/**
	 * It returns the radius of the ship.
	 * @return the radius of the ship.
	 */
	public double getRadius(){
		return this.radius;
	}
	
	/**
	 * Check if an entity is valid
	 * @param entity
	 * 		The entity to check
	 * @return
	 * 		True if the entity is valid
	 * 		False if one of the variables of the entity is invalid
	 */
	public boolean isValidEntity(Entity entity) throws IllegalArgumentException{
		if (((entity.xPosition) < 0) || ((entity.xPosition) > Double.POSITIVE_INFINITY))
			throw new IllegalArgumentException();
		if (((entity.yPosition) < 0) || ((entity.yPosition) > Double.POSITIVE_INFINITY))
			throw new IllegalArgumentException();
		if (((entity.radius) < 0) || ((entity.radius) > Double.POSITIVE_INFINITY))
			throw new IllegalArgumentException();
		else
			return true;
	}
	
	/**
	 * It returns the distance between two given entities.
	 * @param entity1
	 * 			An entity with a given position (x,y), given speed (vx,vy), given orientation and given radius.
	 * @param entity2
	 * 			An entity with a given position (x,y), given speed (vx,vy), given orientation and given radius.
	 * @return The distance between entity1 and entity2. 
	 * @return 0 if entity1 == entity2
	 * @throws IllegalArgumentException
	 * 			If entity1 or/and entity2 aren't valid.
	 */
	public double getDistanceBetween(Entity entity1, Entity entity2) throws IllegalArgumentException{
		if (isValidEntity(entity1) == false)
			throw new IllegalArgumentException();
		if (isValidEntity(entity2) == false)
			throw new IllegalArgumentException();
		return (Math.sqrt(Math.pow(entity1.xPosition - entity2.xPosition, 2) + Math.pow(entity1.yPosition - entity2.yPosition, 2)) - entity1.radius - entity2.radius); 
	}
	
	/**
	 * Returns a boolean type. Returns if the two given entities are at the same spot.
	 * @param entity1
	 * 			An entity with a given position (x,y), given speed (vx,vy), given orientation and given radius.
	 * @param entity2
	 * 			An entity with a given position (x,y), given speed (vx,vy), given orientation and given radius.
	 * @return True if entity1 and entity2 are at the same spot.
	 * @throws IllegalArgumentException
	 * 			If entity1 or/and entity2 aren't valid.
	 */
	public boolean overlap(Entity entity1, Entity entity2) throws IllegalArgumentException{
		if (isValidEntity(entity1) == false)
			throw new IllegalArgumentException();
		if (isValidEntity(entity2) == false)
			throw new IllegalArgumentException();
		if (entity1 == entity2)
			return true;
		else 
			if (getDistanceBetween(entity1, entity2) < 0)
				return true;
			else 
				return false;
	}
	
	/**
	 * When the entities collide the distance between the centers is equal to the sum of both radiuses
	 * @param entity1
	 * 		First entity
	 * @param entity2
	 * 		Second entity
	 * @return
	 * 		The sum of both radiuses
	 * 		|entity1.getRadius() + entity2.getRadius()
	 */
	private double distanceBetweenCentersAtCollision(Entity entity1, Entity entity2){
		return entity1.getRadius() + entity2.getRadius();
	}
	
	/**
	 * The difference between the x-coordinates of both entities
	 * @param entity1
	 * 		First entity
	 * @param entity2
	 * 		Second entity
	 * @return
	 * 		The difference between both x-coordinates
	 */
	public double deltaX(Entity entity1, Entity entity2){
		return entity1.xPosition - entity2.xPosition;
	}
	
	/**
	 * The difference between the y-coordinates of both entities
	 * @param entity1
	 * 		First entity
	 * @param entity2
	 * 		Second entity
	 * @return
	 * 		The difference between both y-coordinates
	 */
	public double deltaY(Entity entity1, Entity entity2){
		return entity1.yPosition - entity2.yPosition;
	}
	
	/**
	 * The difference between the x-coordinates and y-coordinates of both entities
	 * @param entity1
	 * 		First entity
	 * @param entity2
	 * 		Second entity
	 * @return
	 * 		The difference between both x-coordinates and y-coordinates
	 */
	public double[] deltaPosition(Entity entity1, Entity entity2){
		return new double[]{entity1.deltaX(entity1, entity2),entity1.deltaY(entity1, entity2)};
	}
	
	/**
	 * The difference between the speed in x-direction of both entities
	 * @param entity1
	 * 		First entity
	 * @param entity2
	 * 		Second entity
	 * @return
	 * 		The difference between both speeds in x-direction
	 */
	private double deltaVX(Entity entity1, Entity entity2){
		return entity1.xSpeed - entity2.xSpeed;
	}
	
	/**
	 * The difference between the speed in y-direction of both entities
	 * @param entity1
	 * 		First entity
	 * @param entity2
	 * 		Second entity
	 * @return
	 * 		The difference between both speeds in y-direction
	 * 		|entity1.ySpeed - entity2.ySpeed
	 */
	
	private double deltaVY(Entity entity1, Entity entity2){
		return entity1.ySpeed - entity2.ySpeed;
	}
	
	/**
	 * The difference between the speed in x-direction and y-direction of both entities
	 * @param entity1
	 * 		First entity
	 * @param entity2
	 * 		Second entity
	 * @return
	 * 		The difference between both speeds in x-direction and y-direction
	 * 		|new double[]{entity1.deltaVX(entity1, entity2),entity1.deltaVY(entity1, entity2)}
	 */
	public double[] deltaSpeed(Entity entity1, Entity entity2){
		return new double[]{entity1.deltaVX(entity1, entity2),entity1.deltaVY(entity1, entity2)};
	}
	
	/**
	 * This function gives a double which is the sum of the product of the first number from the first vector and the 
	 * first number from the second vector and the product of the second number of the first vector and the second number of the second vector
	 * @param vector1
	 * 		The first vector of length 2
	 * @param vector2
	 * 		The second vector of length 2
	 * @return
	 * 		the dot product of 2 vectors of length 2 (result is a single value)
	 * 		|((vector1[0] * vector2[0]) + (vector1[1] * vector2[1]))
	 */
	public static double dotProduct(double[] vector1, double[] vector2) {
		return ((vector1[0] * vector2[0]) + (vector1[1] * vector2[1]));
	}
	
	/**
	 * This function registers a certain value that is used in the collision function, if it is negative,
	 * the entities will never collide, if it is positive they will collide
	 * @param entity1
	 * 		First entity
	 * @param entity2
	 * 		Second entity
	 * @return
	 * 		The value d
	 * 		|Math.pow(dotProduct(entity1.deltaSpeed(entity1, entity2),entity1.deltaPosition(entity1, entity2)), 2) - 
				(dotProduct(entity1.deltaSpeed(entity1, entity2),entity1.deltaSpeed(entity1, entity2))) * (dotProduct(entity1.deltaPosition(entity1, entity2),entity1.deltaPosition(entity1, entity2))
				- Math.pow(entity1.distanceBetweenCentersAtCollision(entity1, entity2), 2))
	 */
	private double d(Entity entity1, Entity entity2){
		return Math.pow(dotProduct(entity1.deltaSpeed(entity1, entity2),entity1.deltaPosition(entity1, entity2)), 2) - 
				(dotProduct(entity1.deltaSpeed(entity1, entity2),entity1.deltaSpeed(entity1, entity2))) * (dotProduct(entity1.deltaPosition(entity1, entity2),entity1.deltaPosition(entity1, entity2))
				- Math.pow(entity1.distanceBetweenCentersAtCollision(entity1, entity2), 2));
	}
	
	/**
	 * This method will give at what time in the future 2 entities would collide if they were to continue forward without changing direction
	 * or accelerating/slow down
	 * @param entity1
	 * 		The first entity of the 2 entities we are comparing
	 * @param entity2
	 * 		The second entity of the 2 entities we are comparing
	 * @return
	 * 		If the entities never collide this function will return positive infinity (Double.POSITIVE_INFINITY)
	 * 		If they would collapse the function will return a duration described as a double.
	 * 		|(-(dotProduct(entity1.deltaSpeed(entity1, entity2),entity1.deltaPosition(entity1, entity2)) + Math.sqrt(entity1.d(entity1, entity2)))
					/ dotProduct(entity1.deltaSpeed(entity1, entity2),entity1.deltaSpeed(entity1, entity2)))
	 * @throws IllegalArgumentException
	 * 		If one or both of the entities are not valid entities then the function will give an error
	 */
	public double getTimeToCollision(Entity entity1, Entity entity2) throws IllegalArgumentException{
		if (isValidEntity(entity1) == false)
			throw new IllegalArgumentException();
		if (isValidEntity(entity2) == false)
			throw new IllegalArgumentException();
		if ((dotProduct(entity1.deltaSpeed(entity1, entity2),entity1.deltaPosition(entity1, entity2))) > 0)
			return Double.POSITIVE_INFINITY;
		if ((entity1.d(entity1, entity2)) < 0)
			return Double.POSITIVE_INFINITY;
		else
			return (-(dotProduct(entity1.deltaSpeed(entity1, entity2),entity1.deltaPosition(entity1, entity2)) + Math.sqrt(entity1.d(entity1, entity2)))
					/ dotProduct(entity1.deltaSpeed(entity1, entity2),entity1.deltaSpeed(entity1, entity2)));
	}
	
	/**
	 * This function will return the center of the first entity at the time of collision.
	 * @param entity1
	 * 		The first entity.
	 * @param entity2
	 * 		The second entity.
	 * @return
	 * 		The position of the center of the first entity.
	 * @throws IllegalArgumentException
	 * 		If the entities are not valid entities or if they already overlap the function will give an error.
	 */
	public double[] getCollisionPosition(Entity entity1, Entity entity2) throws IllegalArgumentException{
		if (isValidEntity(entity1) == false)
			throw new IllegalArgumentException();
		if (isValidEntity(entity2) == false)
			throw new IllegalArgumentException();
		if (entity1.significantOverlap(entity1, entity2))
			throw new IllegalArgumentException();
		if (getTimeToCollision(entity1, entity2) == Double.POSITIVE_INFINITY)
			return null;
		else
			return new double[] {entity1.xPosition + entity1.xSpeed*getTimeToCollision(entity1, entity2),entity1.yPosition + entity1.ySpeed*getTimeToCollision(entity1, entity2)};
	}
	
	/**
	 * Check whether the provided durantion is valid. 
	 * @param duration
	 * 			The given duration.
	 * @return It returns true if the duration is valid.
	 */
	public boolean isValidDuration(double duration){
		return duration >= 0;
	}
	
	/**
	 * Check whether or not 2 entities significantly overlap; this means that the distance between their centers is
	 * < 99% of the sum of their radiuses
	 * @param entity1
	 * 		First entity
	 * @param entity2
	 * 		Second entity
	 * @return
	 * 		|if (entity1 == entity2)
	 *		|	return true;
	 *		|if (entity1.getDistanceBetween(entity1, entity2) / (entity1.getRadius() + entity2.getRadius()) <= 0.99)
	 *		|	return true;
	 *		|else
	 *		|	return false;
	 */
	public boolean significantOverlap(Entity entity1, Entity entity2){
		if (entity1 == entity2)
			return true;
		if (entity1.getDistanceBetween(entity1, entity2) / (entity1.getRadius() + entity2.getRadius()) <= 0.99)
			return true;
		else
			return false;
	}
	
	/**
	 * Check if an entity is located in the boundaries of the provided world. An error margin of 1% is accepted
	 * @param world
	 * 		Provided World
	 * @param entity
	 * 		Provided entity
	 * @return
	 * 		|(entity.xPosition/entity.radius <= 0.99) || (entity.yPosition/entity.radius <= 0.99) ||
	 *		|((world.width - entity.xPosition)/entity.radius <= 0.99) || ((world.height - entity.yPosition)/entity.radius <= 0.99)
	 */
	public boolean apparentlyWithinBoundaries(World world, Entity entity){
		return (entity.xPosition/entity.radius <= 0.99) || (entity.yPosition/entity.radius <= 0.99) ||
				((world.width - entity.xPosition)/entity.radius <= 0.99) || ((world.height - entity.yPosition)/entity.radius <= 0.99);
	}
	
	/**
	 * Check whether 2 entities apparently collide (error margin of +1% or -1%)
	 * @param entity1
	 * 		The entity that we compare with this entity
	 * @return
	 * 		|if (this.getWorld() != entity1.getWorld())
	 *		|	return false;
	 *		|else 
	 *		|	return (this.getDistanceBetween(this, entity1)/(this.getRadius()+entity1.getRadius()) >= 0.99) &&
	 *		|	(this.getDistanceBetween(this, entity1)/(this.getRadius()+entity1.getRadius()) <= 1.01)
	 */
	public boolean apparantlyCollide(Entity entity1){
		if (this.getWorld() != entity1.getWorld())
			return false;
		else 
			return (this.getDistanceBetween(this, entity1)/(this.getRadius()+entity1.getRadius()) >= 0.99) &&
				(this.getDistanceBetween(this, entity1)/(this.getRadius()+entity1.getRadius()) <= 1.01);
	}
	
	/**
	 * The time until an entity collides with a boundary
	 * @return
	 * 		|World world = this.world;
	 *		|if (world == null)
	 *		|	return Double.POSITIVE_INFINITY;
	 *		|double xTime = Double.POSITIVE_INFINITY;
	 *		|double yTime = Double.POSITIVE_INFINITY;
	 *		|if (this.xSpeed > 0)
	 *		|	xTime = (world.width - this.xPosition - this.radius) / this.xSpeed;
	 *		|if (this.xSpeed < 0)
	 *		|	xTime = -(world.width - this.xPosition - this.radius) / this.xSpeed;
	 *		|if (this.ySpeed > 0)
	 *		|	yTime = (world.height - this.yPosition - this.radius) / this.ySpeed;
	 *		|if (this.ySpeed < 0)
	 *		|	yTime = -(world.height - this.yPosition - this.radius) / this.ySpeed;
	 *		|return Math.min(xTime, yTime)
	 */
	public double timeToBoundaryCollision(){
		World world = this.world;
		if (world == null)
			return Double.POSITIVE_INFINITY;
		double xTime = Double.POSITIVE_INFINITY;
		double yTime = Double.POSITIVE_INFINITY;
		if (this.xSpeed > 0)
			xTime = (world.width - this.xPosition - this.radius) / this.xSpeed;
		if (this.xSpeed < 0)
			xTime = -(this.xPosition - this.radius) / this.xSpeed;
		if (this.ySpeed > 0)
			yTime = (world.height - this.yPosition - this.radius) / this.ySpeed;
		if (this.ySpeed < 0)
			yTime = -(this.yPosition - this.radius) / this.ySpeed;
		return Math.min(xTime, yTime);
	}
	
	/**
	 * Get the position of the center of an entity when it collides with a boundary
	 * @return
	 * 		If it never collides:
	 * 		|new double[] {Double.POSITIVE_INFINITY,Double.POSITIVE_INFINITY}
	 * 		If it collides:
	 * 		|new double[] {this.xPosition + this.xSpeed*this.timeToBoundaryCollision(),this.yPosition + this.ySpeed*this.timeToBoundaryCollision()}
	 */
	public double[] positionBoundaryCollision(){
		if (this.timeToBoundaryCollision() == Double.POSITIVE_INFINITY)
			return new double[] {Double.POSITIVE_INFINITY,Double.POSITIVE_INFINITY};
		else
			return new double[] {this.xPosition + this.xSpeed*this.timeToBoundaryCollision(),this.yPosition + this.ySpeed*this.timeToBoundaryCollision()};		
	}
	
	
	private World world;
	
	/**
	 * Get the world of an entity
	 * @return
	 * 		|this.world
	 */
	public World getWorld(){
		return this.world;
	}
	
	/**
	 * Set the world of this entity to the provided world
	 * @param world
	 * 		Provided world
	 */
	public void setWorld(World world){
		this.world = world;
	}
}
