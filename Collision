package asteroids.model;

public final class Collision{
	
	/**
	 * Create a collision with two or one entities.
	 * @param entity1
	 * 		Entity that collides with an other entity or a boundary.
	 * @param entity2
	 * 		An entity if two entities collide or a null value if entity1 collide with a boundary.
	 * @post this.setEntity1(entity1)
	 * @post this.setEntity2(entity2)
	 */
	public Collision(Entity entity1, Entity entity2){
		this.setEntity1(entity1);
		this.setEntity2(entity2);
	}
	
	private Entity entity1;
	private Entity entity2;
	
	/**
	 * Returns entity1 in the collision.
	 * @return this.entity1
	 */
	public Entity getEntity1(){
		return this.entity1;
	}
	
	/**
	 * Sets entity1 as the given entity.
	 * @param entity
	 */
	private void setEntity1(Entity entity){
		this.entity1 = entity;
	}
	
	/**
	 * Returns entity2 in the collision.
	 * @return this.entity2
	 */
	public Entity getEntity2(){
		return this.entity2;
	}
	
	/**
	 * Sets entity2 as the given entity.
	 * @param entity
	 */
	private void setEntity2(Entity entity){
		this.entity2 = entity;
	}
	
	/**
	 * Determine what type of collision is about to happen
	 */
	public void solveCollision(){
		if (this.getEntity2()==null){
			this.getEntity1().boundryCollision();
		}
		else{
			if (this.getEntity1() instanceof Bullet || this.getEntity2() instanceof Bullet){
				if (this.getEntity1() instanceof Bullet) this.getEntity1().collideWithEntity(this.getEntity2());
				else this.getEntity2().collideWithEntity(this.getEntity1());
			}
			else{
				this.getEntity1().collideWithEntity(this.getEntity2());
			}
				
		}
	}
	
}
