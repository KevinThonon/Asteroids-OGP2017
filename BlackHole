package asteroids.model;

/**
 * A class of a BlackHole with a position, speed (equal to 0) and a radius
 * 
 * @invar a BlackHole must have a valid radius, radius > 100
 * 
 * @author kevinthonon
 *
 */

public class BlackHole extends Entity{
	/**
	 * Create a BlackHole with a given position and radius, the speed is 0
	 * @param xPosition
	 * 		the x-coordinate
	 * @param yPosition
	 * 		the y-coordinate
	 * @param xSpeed
	 * 		the x-coordinate of the speed
	 * @param ySpeed
	 * 		the y-coordinate of the speed
	 * @param radius
	 * 		the radius
	 * @throws IllegalArgumentException
	 */
	public BlackHole(double xPosition, double yPosition, double xSpeed, double ySpeed, double radius) throws IllegalArgumentException {
		super(xPosition,yPosition,xSpeed,ySpeed, radius);
		this.setRadius(radius);
	}
	
	private double radius;
	
	/**
	 * Returns the radius of the BlackHole
	 */
	public double getRadius(){
		return this.radius;
	}
	
	/**
	 * Set the radius
	 * @param the radius of the BlackHole
	 * @throws an error is thrown when the radius that is infinity or smaller than 100
	 */
	public void setRadius(double radius) throws IllegalArgumentException{
		if ((radius < 100) || (radius > Double.POSITIVE_INFINITY)) 
			throw new IllegalArgumentException();
		this.radius = radius;
	}
	
	/**
	 * Check if the BlackHole that is about to be created is a valid one
	 * @return a boolean stating if it is valid or not
	 * @throws IllegalArgumentException: see implementation
	 */
	public boolean isValidBlackHole() throws IllegalArgumentException{
		if (((this.getPosition()[0]) < Double.NEGATIVE_INFINITY) || ((this.getPosition()[0]) > Double.POSITIVE_INFINITY))
			throw new IllegalArgumentException();
		if (((this.getPosition()[1]) < Double.NEGATIVE_INFINITY) || ((this.getPosition()[1]) > Double.POSITIVE_INFINITY))
			throw new IllegalArgumentException();
		if (((this.getRadius()) < 100) || ((this.getRadius()) > Double.POSITIVE_INFINITY))
			throw new IllegalArgumentException();
		else
			return true;
	}
	
	/**
	 * Check if the BlackHole can be created
	 * @post it checks if the BlackHole won't overlap with any entity
	 * @return true if: within boundaries, a valid entity and no overlapping with any other entity
	 * 			else return false
	 */
	public boolean canBeCreated() {
		if (!this.withinBoundaries())
			return false;
		if (!this.isValidEntity(this))
			return false;
		boolean isCreatable = true;
		for (Entity entity: this.getWorld().getEntitys()){
			if (this.overlap(entity, this) && (entity != this) && !(entity instanceof Bullet))
				return false;
			else 
				return isCreatable = true;
		}
		return isCreatable;
	}
	
	/**
	 * Check if the BlackHole is within boundaries
	 * @return false if: see implementation
	 */
	private boolean withinBoundaries() {
		if (((this.getPosition()[0] - this.getRadius()) < 0)  || ((this.getPosition()[1] - this.getRadius()) < 0))
			return false;
		if (((this.getPosition()[0] + this.getRadius()) > this.getWorld().width)  ||
				((this.getPosition()[1] + this.getRadius()) > this.getWorld().height))
			return false;
		else
			return true;
	}

	/**
	 * Set the position of the BlackHole
	 */
	@Override
	public void setPosition(double[] position) throws IllegalArgumentException {
		if (!isValidPosition(position)) throw new IllegalArgumentException("Position isn't valid.");
		if (!this.canBeCreated()) throw new IllegalArgumentException();
		if (!this.isValidBlackHole()) throw new IllegalArgumentException();
		else
			this.position = position;
	}
	
	/**
	 * Set the speed (it is always 0) but this function was added here to be sure that the speed is 0
	 */
	@Override
	public void setSpeed (double[] speed) {
		if (speed[0] != 0)
			speed[0] = 0;
		if (speed[1] != 0)
			speed[1] = 0;
	}
	
	/**
	 * Resolves collision between a BlackHole and another entity
	 */
	@Override
	public void collideWithEntity(Entity entity) {
		if (entity instanceof Ship || entity instanceof MinorPlanet){
			entity.terminate();
		}
		
    	if (entity instanceof BlackHole) {
    		double[] newPosition = new double[] {this.position[0] + this.radius * Math.cos(Math.atan((entity.position[1]
    				- this.position[1]) / (entity.position[0] - this.position[0]))), 
    				this.position[1] + this.radius * Math.sin(Math.atan((entity.position[1]
    	    				- this.position[1]) / (entity.position[0] - this.position[0])))};
    		this.setPosition(newPosition);
    		double[] speed = new double[] {0,0};
    		this.setSpeed(speed);
    		this.setRadius(this.radius + entity.getRadius());
    		entity.terminate();
    	}
    	
    	else
    		return;
	}

	@Override
	public double getMinRadius() {
		return 100;
	}

	@Override
	public void move(double time) {
		return;
	}

	@Override
	public double getMass() {
		return 0;
	}

}
