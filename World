package asteroids.model;

import java.util.HashMap;
import java.util.Set;
import java.util.stream.Collectors;

import asteroids.part2.CollisionListener;

/**
 * Class World consists of an rectangular area with a given width and height.
 * 
 * 
 * @author jefjonkers & kevinthonon
 *
 */
public class World {
	
	public double width;
	public double height;
	
	/**Create a world with a width and height 
	 * expressed in kilometres.
	 * 
	 * @param width
	 * 		  The width of this world.
	 * @param height
	 * 		  The height of this world
	 * @post if (width >= 0 && Double.isFinite(width)) 
	 * 			this.width = width;
	 * @post else 
	 * 			if (Double.isInfinite(width)) this.width = Double.MAX_VALUE; 
	 *          else this.width = 0;
	 * @post if (height >= 0 && Double.isFinite(height)) 
	 * 			this.height = height;
	 * @post else 
	 * 			if (Double.isInfinite(height)) this.height = Double.MAX_VALUE; 
	 *          else this.height = 0;  
	 */
	public World(double width, double height){
		if (width >= 0 && Double.isFinite(width)) {
			this.width = width;
		}
		else {
			if (Double.isInfinite(width)){
				this.width = Double.MAX_VALUE;
			}
			else {
				this.width = 0;
			}
		}
		if (height >= 0 && Double.isFinite(height)) {
			this.height = height;
		}
		else {
			if (Double.isInfinite(height)){
				this.height = Double.MAX_VALUE;
			}
			else {
				this.height = 0;
			}
		}
	}
	
	/**
	 * Returns the width of this world.
	 * @return this.width
	 */
	public double getWidth(){
		return this.width;
	}
	
	/**
	 * Returns the height of this world.
	 * @return this.height
	 */
	public double getHeigth(){
		return this.height;
	}
	
	/**
	 * Returns a double array with the width and the size of this world.
	 * @return new double[] {this.width , this.height}
	 */
	public double[] getWorldSize(){
		return new double[] {this.getWidth(),this.getHeigth()};
	}

	
	private HashMap<Entity,double []> entitysMap = new HashMap<Entity,double []>();
	private boolean isTerminated;
	
	/**
	 * Returns a set of all the entities in this world.
	 * @return this.entities
	 */
	public Set<Entity> getEntitys(){
		return this.entitysMap.keySet();
	}
	
	/**
	 * Returns a set of all the ships in this world.
	 * @see implementation
	 */
	public Set<Ship> getShips(){
		return this.getEntitys().stream().filter(e->e instanceof Ship)
				.map(e->(Ship)e).collect(Collectors.toSet());
	}
	
	/**
	 * Returns a set of all the bullets in this world.
	 * @see implementation
	 */
	public Set<Bullet> getBullets(){
		return this.getEntitys().stream().filter(e->e instanceof Bullet)
				.map(e->(Bullet)e).collect(Collectors.toSet());
	}
	
	/**
	 * Returns a set of all the minorPlanets in this world.
	 * @see implementation
	 */
	public Set<MinorPlanet> getMinorPlanets(){
		return this.getEntitys().stream().filter(e->e instanceof MinorPlanet)
				.map(e->(MinorPlanet)e).collect(Collectors.toSet());
	}
	
	/**
	 * Returns a set of all the asteroids in this world.
	 * @see implementation
	 */
	public Set<Asteroid> getAsteroids(){
		return this.getEntitys().stream().filter(e->e instanceof Asteroid)
				.map(e->(Asteroid)e).collect(Collectors.toSet());
	}
	
	/**
	 * Returns a set of all the planetoids in this world.
	 * @see implementation
	 */
	public Set<Planetoid> getPlanetoids(){
		return this.getEntitys().stream().filter(e->e instanceof Planetoid)
				.map(e->(Planetoid)e).collect(Collectors.toSet());
	}
	
	/**
	 * Check whether this world can have as entity an certain entity.
	 * @param entity1
	 * 		A entity.
	 * @return if (entity1.significantOverlap(entity1,entity2)) return false
	 * @return if !(entity1.getWorld() == this || entity1.getWorld() == null ) return false
	 * @return else return true
	 */
	public boolean canHaveAsEntity(Entity entity1) {
		for (Entity entity2: this.getEntitys()){
			if (entity1.significantOverlap(entity1, entity2)) return false;
		}
		if ((entity1.apparentlyOutBoundaries(this, entity1))) return false;
		if (!(entity1.getWorld() == this || entity1.getWorld() == null )) return false;
		return true;
	}
	
	/**
	 * It adds a entity to this world.
	 * @param entity
	 * @throws IllegalArgumentException
	 * 		if (!canHaveAsEntity(entity))
	 * @post this.entitys.add(entity)
	 * @post entity.setWorld(this)
	 */
	public void addEntity(Entity entity) {
		if (!(canHaveAsEntity(entity))) 
			throw new IllegalArgumentException("The world can't have this entity.");
		double [] position= entity.getPosition();
		this.entitysMap.put(entity, position);
		entity.setWorld(this);
	}
	
	/**
	 * It removes an entity from this world.
	 * @param entity
	 * @throws IllegalArgumentException
	 * 		if (entity.getWorld() != this)
	 * @post entity.setWorld(null);
	 */
	public void removeEntity(Entity entity) {
		if (entity==null) 
			throw new IllegalArgumentException("This entity is null");
		if (entity.getWorld() != this)
			throw new IllegalArgumentException("This entity isn't in this world");
		this.entitysMap.remove(entity);
		entity.setWorld(null);
	}
	
	/**
	 * Returns entity at the given position in this world.
	 * @param  position
	 * @return if (position[0] < 0 || position[0] > Double.MAX_VALUE 
	 *		   || position[1] < 0 || position[1] > Double.MAX_VALUE
	 *		   || Double.isNaN(position[0]) || Double.isNaN(position[1])
	 *	       return null;
	 * @return for (Entity entity: this.getEntitys())
	 *		   if (this.entitysMap.get(entity)==position) return entity;
	 * @return else return null
	 */
	public Entity getEntityAt(double[] position){
		if (position[0] < 0 || position[0] > Double.MAX_VALUE 
				|| position[1] < 0 || position[1] > Double.MAX_VALUE
				|| Double.isNaN(position[0]) || Double.isNaN(position[1])){
			return null;
		}
		for (Entity entity: this.getEntitys()){
			if (this.entitysMap.get(entity)==position) return entity;
		}
		return null;
	}
	
	/**
	 * Returns the time until the first collision happens.
	 * @param world
	 * 		The given world.
	 * @return Math.min( for(Entity entity1: world.getentitys()) 1entity.timeToBoundryCollision() ||
	 * 		1entity.getTimeToCollisoin(entity1,for(Entity entity2: world.getEntitys())))
	 */
	public double getTimeToCollisionInWorld(){
		Set<Entity> entitystocontrol = this.getEntitys();
		double mintimetocollision = Double.POSITIVE_INFINITY; 
		for (Entity entity1: this.getEntitys()) {
			if (entity1.timeToBoundaryCollision() < mintimetocollision) 
				mintimetocollision = entity1.timeToBoundaryCollision();
			for (Entity entity2: entitystocontrol){
				if (entity2 !=entity1){
					double timetocollision = entity1.getTimeToCollision(entity1,entity2);
					if (0 <= timetocollision && timetocollision < mintimetocollision)
						mintimetocollision = timetocollision;
				}
			}
				
		}
		return mintimetocollision;
	}
	
    /**
     * Returns the collision that happens first in this world 
     * 		between two entities or an entity and a boundary.
     * @return if  (mintimetocollision == Double.POSITIVE_INFINITY) return (null)
     * @return else if (entity1.timeToBoundryCollision <= entity1.getTimeTocollision(entity1,entity2)) return (entity1 , null)
     * @return else return (entity1,entity2)
     */
	public Collision getFirstCollisions(){
		Collision collisions = (null);
		Set<Entity> entitystocontrol = this.getEntitys();
		double mintimetocollision = Double.POSITIVE_INFINITY; 
		for (Entity entity1: this.getEntitys()) {
			if (entity1.timeToBoundaryCollision() < mintimetocollision){
				mintimetocollision = entity1.timeToBoundaryCollision();
				collisions = new Collision (entity1 , null);
			}
			for (Entity entity2: entitystocontrol){
				if (entity2!=entity1){
					double timetocollision = entity1.getTimeToCollision(entity1,entity2);
					if (timetocollision < mintimetocollision){
						mintimetocollision = timetocollision;
						collisions = new Collision (entity1,entity2);
					}
				}
			}
		}
		return collisions;
	}
	
	/**
	 * Returns the position of the next collision in this world.
	 * @return if (collisions.getTimeToCollisionInWorld(this) == Double.POSITIVE_INFINITY) return null
	 * @return if (collisions.getEntity2()==null) return entity.positionBoundaryCollision()
	 * @return else entity.getCollisionPosition(entity, collisions.getEntity2())
	 */
	public double [] getPositionNextCollision() {
		Collision collisions = this.getFirstCollisions();
		Entity entity = collisions.getEntity1();
		if (this.getTimeToCollisionInWorld() == Double.POSITIVE_INFINITY )
			return null;
		if (collisions.getEntity2()==null){
			return entity.positionBoundaryCollision();
		}
		else{
			return entity.getCollisionPosition(entity, collisions.getEntity2());
		}
	}
    
    /**
     * Checks whether the given time is valid.
     * @param time
     * 		A certain number of seconds.
     * @return if (time < 0) return false
     * @return if (time == Double.POSITIVE_INFINITY) return false
     * @return if (time == Double.NaN return false
     * @return else return true
     */
	private boolean isValidTime(double time){
		if (time < 0) return false;
		if (Double.isInfinite(time)) return false;
		if (Double.isNaN(time)) return false;
		return true;
		
	}
	
	/**
	 * Advances the sate of this world a certain number of seconds after a previous solved collision.
	 * @param time
	 * 		A certain number of seconds.
	 * @param previousSolvedCollision
	 * 		The previous solve collision.
	 * 
	 */
	public void evolve(double time, CollisionListener collisionListener){
		if (!(isValidTime(time))) throw new IllegalArgumentException("This given time isn't valid");
		Collision collisions = getFirstCollisions();
		double timefirstcollision = this.getTimeToCollisionInWorld();
		if (0 < timefirstcollision && timefirstcollision <= time){
			this.advance(timefirstcollision);
			collisions.solveCollision();
			double newTime = time - timefirstcollision;
			evolve(newTime, collisionListener);
		}
		else{
			advance(time);
		}
	}
	
	/**
	 * It moves entities for a certain number of seconds.
	 * @param time
	 * 		A certain number of seconds.
	 */
	public void advance(double time){
		for (Entity entity: this.getEntitys()){
			entity.move(time);
		}
	}
	
	/**
	 * Terminate this world by removing all entities from this world.
	 * @post entity.setWorld(null)
	 * @post this.bullet.clear()
	 * @post this.ships.clear()
	 */
	public void terminateWorld(){
		for (Entity entity: getEntitys()){
			entity.setWorld(null);
			}
		this.entitysMap.clear();
		this.isTerminated = true;
	}
	
	/**
	 * Checks whether this world is destroyed.
	 * @return if (bullets.size()==00 && ships.size()==0) return true
	 * @return else false;
	 */
	public boolean isTerminatedWorld(){
		if (this.isTerminated== true) return true;
		return false;
	}
}
